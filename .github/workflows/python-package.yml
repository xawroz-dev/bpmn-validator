name: BPMN Validation

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  validate_bpmn:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write  # Add this line
      pull-requests: write  # Optionally add this
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Get list of changed BPMN files
        id: get_changed_files
        run: |
          # Set default base branch
          DEFAULT_BRANCH='main'

          # Determine the base ref and head ref
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
            HEAD_REF="${{ github.event.pull_request.head.sha }}"
          else
            BASE_REF="${{ github.event.before }}"
            HEAD_REF="${{ github.event.after }}"
          fi

          echo "BASE_REF=$BASE_REF"
          echo "HEAD_REF=$HEAD_REF"

          git fetch origin $BASE_REF --depth=1 || git fetch origin $DEFAULT_BRANCH --depth=1
          git fetch origin $HEAD_REF --depth=1

          git diff --name-only $BASE_REF $HEAD_REF > changed_files.txt
          bpmn_files=$(grep '\.bpmn$' changed_files.txt || true)
          if [ -z "$bpmn_files" ]; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "$bpmn_files" > bpmn_files.txt
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      - name: Run BPMN Validator
        if: steps.get_changed_files.outputs.changed == 'true'
        run: |
          python main.py --file-list bpmn_files.txt || echo "Validation failed with exit code $?"
        continue-on-error: true

      - name: Deploy Report to GitHub Pages
        if: steps.get_changed_files.outputs.changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Clone the gh-pages branch
          git clone --depth=1 --branch=gh-pages https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} gh-pages
          
          # Copy the report into the cloned repository
          mkdir -p gh-pages/reports/pr-${{ github.event.pull_request.number }}
          cp reports/report.html gh-pages/reports/pr-${{ github.event.pull_request.number }}/index.html
          
          # Navigate into the repository
          cd gh-pages
          
          # Configure Git inside the repository
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          
          # Check if there are any changes to commit
          if [ -n "$(git status --porcelain)" ]; then
          git add .
          git commit -m "Add report for PR #${{ github.event.pull_request.number }}"
          git push origin gh-pages
          else
          echo "No changes to commit"
          fi
         
      - name: Comment on PR with Report Link
        if: steps.get_changed_files.outputs.changed == 'true' && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const reportUrl = `https://${owner}.github.io/${repo}/reports/pr-${prNumber}/`;
      
            await github.rest.issues.createComment({
              owner: owner,
              repo: repo,
              issue_number: prNumber,
              body: `ðŸš€ BPMN validation report is available [here](${reportUrl}).`
            });

      - name: No BPMN files changed
        if: steps.get_changed_files.outputs.changed != 'true'
        run: echo "No BPMN files were changed in this PR."
